subClaimsModel.tooltip=<html>\
<center><h3> Aggregate Claims Model </h3></center><hr>\
<p>\
A single distribution is specifed. It maybe modified by the distribution<br>\
modifiers, or the selected severity indicies.\
</p>\
</html>
parmPayoutPattern.tooltip=<html>\
<center><h3> Aggregate Payouts </h3></center><hr>\
<p>\
Payouts are made in accordance with the payout spec in JIRA, ART-687<br>\
In general we note that no stochastic payments are allowed before the<br>\
update date. The pattern is rescaled so that any remaining outstanding<br>\
claims are paid out on the dates of the original pattern, but in different<br> \
proportions.\
</p>\
</html>
parmParameterizationBasis.tooltip=<html>\
<center><h3> Aggregate Parameterization Base </h3></center><hr>\
<p>\
<ol>\
<li><b> Losses occuring - no split </b></li>\
Probably the most commonly used. This simply generates a claim according<br>\
to the specified claims distribution and assigns it a random date.<br>\
This is the 'fastest' basis in terms of simulation runtime. <br> <br>\
<li><b>Losses occuring</b></li>\
This parameterisation basis will split claims for each month in the contract period.<br>\
This is typically 12 months for a standard contract.<br>\
The key point is that each individual piece is assigned it's own, unique date.<br>\
This means that the accounting treatment of aggregate claims can effectively be<br>\
smoothed over the duration of the contract, instead of the entire sum being accounted<br>\
for on a specific point. <br> <br>\
<li><b> Risks Attaching </b></li>\
This parameterisation basis also splits the claims in the same manner as losses occuring<br>\
but allows claims to occur anytime up to the end of the contract period plus the specified<br>\
extra duration of this particular contract.<br>\
<br>\
Portfolio models with aggregate claims are recommended to use a splitting parameterisation<br> \
basis to ensure a realistically smooth booking of losses over the course of a deal. <br>\
Note that the splitting will have a negative performance impact on simulation runtime.<br>\
</p>\
</html>
parmPayoutPatternBase.tooltip=<html>\
<p>\
The payout pattern base switch informs the claim what the start<br>\
date of it's pattern should be. Claims can be developed with from their<br>\
occurence date, or from the start of the period they incepted in.<br><br>\
The reserve development pattern base starts the payouts from the start<br>\
of the inception period of the claim, but behaves differently in that it<br>\
takes the remainder, or tail, of the pattern after the update date,<br>\
and rescales it to payout the remaining outstanding in direct proportion to<br>\
the original pattern. \
</p>\
</html>
parmActualClaims.tooltip=<html>\
<center><h3> Aggregate Actual Claims </h3></center><hr>\
<p>\
NONE actual claims are only allowed for an inception model, i.e<br>\
a model with the update date equal to the start date of the simulationn<br>\
For actual claims, simply enter the historic claims in the table,<br>\
the generated claims will be updated according to the updating methodology,<br>\
this table is useful for specifiying claim cashflows before the update date.\
</p>\
</html>
parmUpdatingMethodology.tooltip=<html>\
<center><h3> Aggregate Updating Method</h3></center><hr>\
<ol>\
<li><b> Original Ultimate </b></li>\
We have two numbers available; the reported amount in the actual claims,<br>\
and the random number generated by the stochastic claims model. This <br>\
strategy simply takes the more conservative, or larger, of the two.\
<li><b> BF Updating </b></li>\
This updates the ultimate amount as per JIRA ART-971. At a high level,<br>\
we note the current reported amount, and interploate how far through<br>\
the specified reporting pattern we are. We can then compute an <br> \
'unreported' amount, and add the two together to form an estimate<br>\
of the final total. <br>\
</ol>\
<p>\
\
</p>\
</html>